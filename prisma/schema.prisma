// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tasks         Task[]    @relation("AssignedTasks")
  createdTasks  Task[]    @relation("CreatedBy")
  organization  Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  teams         TeamMember[]
  sessions      Session[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  teams     Team[]
}

model Team {
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]
  tasks          Task[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      TeamRole @default(MEMBER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      Status   @default(TODO)
  priority    Priority @default(MEDIUM)
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  assigneeId  String
  assignee    User     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdById String
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id         String    @id @default(uuid())
  email      String
  token      String    @unique
  teamId     String
  role       TeamRole  @default(MEMBER)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  used       Boolean   @default(false)
}

enum Role {
  USER
  ADMIN
}

enum TeamRole {
  LEAD
  MEMBER
  VIEWER
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

